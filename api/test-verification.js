#!/usr/bin/env node

/**
 * Script de teste para verifica√ß√£o ZK simplificada
 * 
 * Uso:
 * node test-verification.js
 * 
 * Este script testa a verifica√ß√£o ZK usando apenas o Garaga CLI
 * com os arquivos padr√£o do projeto.
 */

import { verifyZKProof, testConnection } from './src/services/starknetService.js';
import path from 'path';

async function testVerification() {
  try {
    console.log('üöÄ Iniciando teste de verifica√ß√£o ZK...\n');

    // Testar conex√£o primeiro
    console.log('1Ô∏è‚É£ Testando conex√£o com o contrato...');
    const connectionTest = await testConnection();
    
    if (!connectionTest.success) {
      console.error('‚ùå Falha na conex√£o:', connectionTest.message);
      return;
    }
    
    console.log('‚úÖ Conex√£o estabelecida:', connectionTest.message);
    console.log('üìã Informa√ß√µes do contrato:', connectionTest.contractInfo);
    console.log('');

    // Caminhos dos arquivos padr√£o do projeto
    const proofPath = path.resolve('zk-noir-circuit/target/proof_starknet_zk86/proof');
    const vkPath = path.resolve('zk-noir-circuit/target/proof_starknet_zk86/vk');
    const publicInputsPath = path.resolve('zk-noir-circuit/target/proof_starknet_zk86/public_inputs');

    console.log('2Ô∏è‚É£ Verificando arquivos necess√°rios...');
    console.log('üìÅ Caminhos dos arquivos:');
    console.log(`   - Proof: ${proofPath}`);
    console.log(`   - VK: ${vkPath}`);
    console.log(`   - Public Inputs: ${publicInputsPath}`);
    console.log('');

    // Executar verifica√ß√£o
    console.log('3Ô∏è‚É£ Executando verifica√ß√£o ZK...');
    const result = await verifyZKProof({
      proofPath,
      vkPath,
      publicInputsPath
    });

    console.log('');
    console.log('üìä Resultado da verifica√ß√£o:');
    console.log(`   - V√°lida: ${result.isValid ? '‚úÖ Sim' : '‚ùå N√£o'}`);
    console.log(`   - M√©todo: ${result.verificationMethod}`);
    console.log(`   - Formato: ${result.formatUsed}`);
    console.log(`   - Tamanho dos dados: ${result.dataSize} elementos`);
    console.log(`   - Timestamp: ${result.timestamp}`);
    console.log(`   - Contrato: ${result.contractAddress}`);
    console.log(`   - Rede: ${result.network}`);

    if (result.isValid) {
      console.log('');
      console.log('üéâ SUCESSO! A prova foi verificada com sucesso no contrato Starknet!');
    } else {
      console.log('');
      console.log('‚ö†Ô∏è A prova foi rejeitada pelo contrato.');
    }

  } catch (error) {
    console.error('');
    console.error('‚ùå Erro durante o teste:', error.message);
    
    if (error.message.includes('garaga')) {
      console.error('');
      console.error('üí° Dica: Certifique-se de que o Garaga CLI est√° instalado e dispon√≠vel no PATH.');
      console.error('   Instale com: cargo install garaga');
    }
    
    if (error.message.includes('ENOENT')) {
      console.error('');
      console.error('üí° Dica: Certifique-se de que os arquivos de prova existem no diret√≥rio correto.');
      console.error('   Execute primeiro: cd zk-noir-circuit && nargo prove');
    }
    
    process.exit(1);
  }
}

// Executar teste se este arquivo for chamado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testVerification();
}

export { testVerification };
