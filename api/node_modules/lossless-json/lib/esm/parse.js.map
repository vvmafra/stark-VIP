{"version":3,"file":"parse.js","names":["parseLosslessNumber","revive","parse","text","reviver","options","optionsObj","parseNumber","onDuplicateKey","throwDuplicateKey","i","value","parseValue","expectValue","expectEndOfInput","parseObject","charCodeAt","codeOpeningBrace","skipWhitespace","object","initial","length","codeClosingBrace","eatComma","start","key","parseString","undefined","throwObjectKeyExpected","eatColon","throwObjectValueExpected","Object","prototype","hasOwnProperty","call","isDeepEqual","returnedValue","position","oldValue","newValue","throwObjectKeyOrEndExpected","parseArray","codeOpeningBracket","array","codeClosingBracket","expectArrayItem","push","throwArrayItemOrEndExpected","parseNumeric","parseKeyword","name","slice","isWhitespace","codeDoubleQuote","result","codeBackslash","char","escapeChar","escapeCharacters","isHex","String","fromCharCode","Number","parseInt","throwInvalidUnicodeCharacter","throwInvalidEscapeCharacter","isValidStringCharacter","throwInvalidCharacter","expectEndOfString","codeMinus","expectDigit","codeZero","isNonZeroDigit","isDigit","codeDot","codeLowercaseE","codeUppercaseE","codePlus","codeComma","SyntaxError","gotAt","codeColon","numSoFar","_ref","pos","chars","got","code","codeSpace","codeNewline","codeTab","codeReturn","codeNine","codeUppercaseA","codeUppercaseF","codeLowercaseA","codeLowercaseF","codeOne","a","b","Array","isArray","every","item","index","isObject","keys","Set","f","n","r","t"],"sources":["../../src/parse.ts"],"sourcesContent":["import { parseLosslessNumber } from './numberParsers.js'\nimport { revive } from './revive.js'\nimport type { DuplicateKeyInfo, GenericObject, NumberParser, ParseOptions, Reviver } from './types'\n\n/**\n * The LosslessJSON.parse() method parses a string as JSON, optionally transforming\n * the value produced by parsing.\n *\n * The parser is based on the parser of Tan Li Hou shared in\n * https://lihautan.com/json-parser-with-javascript/\n *\n * @param text\n * The string to parse as JSON. See the JSON object for a description of JSON syntax.\n *\n * @param [reviver]\n * If a function, prescribes how the value originally produced by parsing is\n * transformed, before being returned.\n *\n * @param [options=ParseOptions | NumberParserArgument]\n * Pass a custom number parser. Input is a string, and the output can be unknown\n * numeric value: number, bigint, LosslessNumber, or a custom BigNumber library.\n *\n * @returns Returns the Object corresponding to the given JSON text.\n *\n * @throws Throws a SyntaxError exception if the string to parse is not valid JSON.\n */\nexport function parse(\n  text: string,\n  reviver?: Reviver | null,\n  options?: ParseOptions | NumberParser\n): unknown {\n  const optionsObj = typeof options === 'function' ? { parseNumber: options } : options\n  const parseNumber = optionsObj?.parseNumber ?? parseLosslessNumber\n  const onDuplicateKey = optionsObj?.onDuplicateKey ?? throwDuplicateKey\n\n  let i = 0\n  const value = parseValue()\n  expectValue(value)\n  expectEndOfInput()\n\n  return reviver ? revive(value, reviver) : value\n\n  function parseObject(): GenericObject<unknown> | undefined {\n    if (text.charCodeAt(i) === codeOpeningBrace) {\n      i++\n      skipWhitespace()\n\n      const object: GenericObject<unknown> = {}\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBrace) {\n        if (!initial) {\n          eatComma()\n          skipWhitespace()\n        } else {\n          initial = false\n        }\n\n        const start = i\n\n        const key = parseString()\n        if (key === undefined) {\n          throwObjectKeyExpected()\n          return // To make TS happy\n        }\n\n        skipWhitespace()\n        eatColon()\n        const value = parseValue()\n\n        if (value === undefined) {\n          throwObjectValueExpected()\n          return // To make TS happy\n        }\n\n        // handle duplicate keys\n        // biome-ignore lint/suspicious/noPrototypeBuiltins: TODO: replace with hasOwn one day, when browser support is high enough\n        if (Object.prototype.hasOwnProperty.call(object, key) && !isDeepEqual(value, object[key])) {\n          // Note that we could also test `if(key in object) {...}`\n          // or `if (object[key] !== 'undefined') {...}`, but that is slower.\n          const returnedValue = onDuplicateKey({\n            key,\n            position: start + 1,\n            oldValue: object[key],\n            newValue: value\n          })\n\n          if (returnedValue !== undefined) {\n            object[key] = returnedValue\n          }\n        } else {\n          object[key] = value\n        }\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBrace) {\n        throwObjectKeyOrEndExpected()\n      }\n      i++\n\n      return object\n    }\n  }\n\n  function parseArray(): Array<unknown> | unknown {\n    if (text.charCodeAt(i) === codeOpeningBracket) {\n      i++\n      skipWhitespace()\n\n      const array = []\n      let initial = true\n      while (i < text.length && text.charCodeAt(i) !== codeClosingBracket) {\n        if (!initial) {\n          eatComma()\n        } else {\n          initial = false\n        }\n\n        const value = parseValue()\n        expectArrayItem(value)\n        array.push(value)\n      }\n\n      if (text.charCodeAt(i) !== codeClosingBracket) {\n        throwArrayItemOrEndExpected()\n      }\n      i++\n\n      return array\n    }\n  }\n\n  function parseValue(): unknown {\n    skipWhitespace()\n\n    const value =\n      parseString() ??\n      parseNumeric() ??\n      parseObject() ??\n      parseArray() ??\n      parseKeyword('true', true) ??\n      parseKeyword('false', false) ??\n      parseKeyword('null', null)\n\n    skipWhitespace()\n\n    return value\n  }\n\n  function parseKeyword(name: string, value: unknown): unknown | undefined {\n    if (text.slice(i, i + name.length) === name) {\n      i += name.length\n      return value\n    }\n  }\n\n  function skipWhitespace() {\n    while (isWhitespace(text.charCodeAt(i))) {\n      i++\n    }\n  }\n\n  function parseString() {\n    if (text.charCodeAt(i) === codeDoubleQuote) {\n      i++\n      let result = ''\n      while (i < text.length && text.charCodeAt(i) !== codeDoubleQuote) {\n        if (text.charCodeAt(i) === codeBackslash) {\n          const char = text[i + 1]\n          const escapeChar = escapeCharacters[char]\n          if (escapeChar !== undefined) {\n            result += escapeChar\n            i++\n          } else if (char === 'u') {\n            if (\n              isHex(text.charCodeAt(i + 2)) &&\n              isHex(text.charCodeAt(i + 3)) &&\n              isHex(text.charCodeAt(i + 4)) &&\n              isHex(text.charCodeAt(i + 5))\n            ) {\n              result += String.fromCharCode(Number.parseInt(text.slice(i + 2, i + 6), 16))\n              i += 5\n            } else {\n              throwInvalidUnicodeCharacter(i)\n            }\n          } else {\n            throwInvalidEscapeCharacter(i)\n          }\n        } else {\n          if (isValidStringCharacter(text.charCodeAt(i))) {\n            result += text[i]\n          } else {\n            throwInvalidCharacter(text[i])\n          }\n        }\n        i++\n      }\n      expectEndOfString()\n      i++\n      return result\n    }\n  }\n\n  function parseNumeric() {\n    const start = i\n    if (text.charCodeAt(i) === codeMinus) {\n      i++\n      expectDigit(start)\n    }\n\n    if (text.charCodeAt(i) === codeZero) {\n      i++\n    } else if (isNonZeroDigit(text.charCodeAt(i))) {\n      i++\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeDot) {\n      i++\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (text.charCodeAt(i) === codeLowercaseE || text.charCodeAt(i) === codeUppercaseE) {\n      i++\n      if (text.charCodeAt(i) === codeMinus || text.charCodeAt(i) === codePlus) {\n        i++\n      }\n      expectDigit(start)\n      while (isDigit(text.charCodeAt(i))) {\n        i++\n      }\n    }\n\n    if (i > start) {\n      return parseNumber(text.slice(start, i))\n    }\n  }\n\n  function eatComma() {\n    if (text.charCodeAt(i) !== codeComma) {\n      throw new SyntaxError(`Comma ',' expected after value ${gotAt()}`)\n    }\n    i++\n  }\n\n  function eatColon() {\n    if (text.charCodeAt(i) !== codeColon) {\n      throw new SyntaxError(`Colon ':' expected after property name ${gotAt()}`)\n    }\n    i++\n  }\n\n  function expectValue(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`JSON value expected ${gotAt()}`)\n    }\n  }\n\n  function expectArrayItem(value: unknown) {\n    if (value === undefined) {\n      throw new SyntaxError(`Array item expected ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfInput() {\n    if (i < text.length) {\n      throw new SyntaxError(`Expected end of input ${gotAt()}`)\n    }\n  }\n\n  function expectDigit(start: number) {\n    if (!isDigit(text.charCodeAt(i))) {\n      const numSoFar = text.slice(start, i)\n      throw new SyntaxError(`Invalid number '${numSoFar}', expecting a digit ${gotAt()}`)\n    }\n  }\n\n  function expectEndOfString() {\n    if (text.charCodeAt(i) !== codeDoubleQuote) {\n      throw new SyntaxError(`End of string '\"' expected ${gotAt()}`)\n    }\n  }\n\n  function throwObjectKeyExpected() {\n    throw new SyntaxError(`Quoted object key expected ${gotAt()}`)\n  }\n\n  function throwDuplicateKey({ key, position }: DuplicateKeyInfo) {\n    throw new SyntaxError(`Duplicate key '${key}' encountered at position ${position}`)\n  }\n\n  function throwObjectKeyOrEndExpected() {\n    throw new SyntaxError(`Quoted object key or end of object '}' expected ${gotAt()}`)\n  }\n\n  function throwArrayItemOrEndExpected() {\n    throw new SyntaxError(`Array item or end of array ']' expected ${gotAt()}`)\n  }\n\n  function throwInvalidCharacter(char: string) {\n    throw new SyntaxError(`Invalid character '${char}' ${pos()}`)\n  }\n\n  function throwInvalidEscapeCharacter(start: number) {\n    const chars = text.slice(start, start + 2)\n    throw new SyntaxError(`Invalid escape character '${chars}' ${pos()}`)\n  }\n\n  function throwObjectValueExpected() {\n    throw new SyntaxError(`Object value expected after ':' ${pos()}`)\n  }\n\n  function throwInvalidUnicodeCharacter(start: number) {\n    const chars = text.slice(start, start + 6)\n    throw new SyntaxError(`Invalid unicode character '${chars}' ${pos()}`)\n  }\n\n  // zero based character position\n  function pos(): string {\n    return `at position ${i}`\n  }\n\n  function got(): string {\n    return i < text.length ? `but got '${text[i]}'` : 'but reached end of input'\n  }\n\n  function gotAt(): string {\n    return `${got()} ${pos()}`\n  }\n}\n\nfunction isWhitespace(code: number): boolean {\n  return code === codeSpace || code === codeNewline || code === codeTab || code === codeReturn\n}\n\nfunction isHex(code: number): boolean {\n  return (\n    (code >= codeZero && code <= codeNine) ||\n    (code >= codeUppercaseA && code <= codeUppercaseF) ||\n    (code >= codeLowercaseA && code <= codeLowercaseF)\n  )\n}\n\nfunction isDigit(code: number): boolean {\n  return code >= codeZero && code <= codeNine\n}\n\nfunction isNonZeroDigit(code: number): boolean {\n  return code >= codeOne && code <= codeNine\n}\n\nexport function isValidStringCharacter(code: number): boolean {\n  return code >= 0x20 && code <= 0x10ffff\n}\n\nexport function isDeepEqual(a: unknown, b: unknown): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.length === b.length && a.every((item, index) => isDeepEqual(item, b[index]))\n  }\n\n  if (isObject(a) && isObject(b)) {\n    const keys = [...new Set([...Object.keys(a), ...Object.keys(b)])]\n    return keys.every((key) => isDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\nfunction isObject(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n\n// map with all escape characters\nconst escapeCharacters: GenericObject<string> = {\n  '\"': '\"',\n  '\\\\': '\\\\',\n  '/': '/',\n  b: '\\b',\n  f: '\\f',\n  n: '\\n',\n  r: '\\r',\n  t: '\\t'\n  // note that \\u is handled separately in parseString()\n}\n\nconst codeBackslash = 0x5c // \"\\\"\nconst codeOpeningBrace = 0x7b // \"{\"\nconst codeClosingBrace = 0x7d // \"}\"\nconst codeOpeningBracket = 0x5b // \"[\"\nconst codeClosingBracket = 0x5d // \"]\"\nconst codeSpace = 0x20 // \" \"\nconst codeNewline = 0xa // \"\\n\"\nconst codeTab = 0x9 // \"\\t\"\nconst codeReturn = 0xd // \"\\r\"\nconst codeDoubleQuote = 0x0022 // \"\nconst codePlus = 0x2b // \"+\"\nconst codeMinus = 0x2d // \"-\"\nconst codeZero = 0x30\nconst codeOne = 0x31\nconst codeNine = 0x39\nconst codeComma = 0x2c // \",\"\nconst codeDot = 0x2e // \".\" (dot, period)\nconst codeColon = 0x3a // \":\"\nexport const codeUppercaseA = 0x41 // \"A\"\nexport const codeLowercaseA = 0x61 // \"a\"\nexport const codeUppercaseE = 0x45 // \"E\"\nexport const codeLowercaseE = 0x65 // \"e\"\nexport const codeUppercaseF = 0x46 // \"F\"\nexport const codeLowercaseF = 0x66 // \"f\"\n"],"mappings":"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","ignoreList":[]}